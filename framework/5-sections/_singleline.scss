// HEADER ///////////////////////////////////////////////////////////////////
.singleline-header{
	z-index:					10;
	//border:						0!important;

	// ICON
	[class*="icon-size-"]{
		margin:					0 auto 0.3rem auto;
		svg{
			fill:				white;
		}

		&.active{
			opacity:			1!important;
		}
	}

	// PBAR
	.pbar{
		@include				abs-pos(0.9rem, auto, auto, 30%);
		.pbar--item::after{
			background:			rgba(white,0.3);
		}
	}

	// ICON ALERT
	i[class*="icon-"]{
		&.alert{
			@include			abs-pos(15px, 15px, auto, auto);
			> svg{
				fill:			#ec4230;
			}
		}
	}

	// BACKGROUND
	&.color-bg-type-primary{
		background:				linear-gradient(0deg,
												RGBA(var(--clr-type-primary) / 100%) 50%,
												RGBA(var(--clr-type-primary-light) / 100%) 100%)!important;
	}

	// GRID 
	.grid.type2{
		> .col{
			background:			rgba(white,0.1)!important;
			> h3{
				line-height:	inherit;
				box-sizing:		border-box;
				padding-left:	1rem;
				padding-right:	1rem;
			}
		}
	}

	&.color-bg-type-primary svg.ui.icon{
		fill:					white!important;
	}
}


.color-bg-type-primary{
	.singleline-icon{
		opacity:				1;
	}
}

// force no border
.ui.grid.gap-no > .ui.col.singleline-header.color-bg-type-primary{
	border:						0!important;
}







// THREE NEW /////////////////////////////////////////////////////////////////////
.singleline-tree2{

	$gap:								16px;
	$cable-width:						16px;
	$link-width:						50px;
	$transition:						0.6s;

	width:								100%;

	/*test*/
	@for $i from 1 through 12 {
		&[data-cables="#{$i}"]{
			.horz,
			.vert{
				grid-template-columns:	repeat($i, 1fr);
			}	
		}		
	}

	.horz,
	.vert{
		display:						grid;
		column-gap:						$gap;

		.item{
			position:					relative;
			grid-column:				span 1;

			.cable{
				background:				RGBA(var(--sch-clr-grid-border) / 100%);
				@include				transition(background $transition 0s ease-in-out);			
			}

			&[data-link="true"]{
				.link{
					display:			block!important;
				}
			}

			.link{
				background:				RGBA(var(--sch-clr-background) / var(--sch-clr-background-op));
				@include				transition(	width $transition 0s ease-in-out,
													height $transition 0s ease-in-out);
				&::before,
				&::after{
					background:			RGBA(var(--sch-clr-grid-border) / 100%);				
					@include			transition(background $transition 0s ease-in-out);
				}
			}

			&.active{
				> .cable{
					background:			RGBA(var(--sch-clr-active) / 100%);
				}
				.link{
					background:			RGBA(var(--sch-clr-background) / var(--sch-clr-background-op));
					&::before,
					&::after{
						background:		RGBA(var(--sch-clr-active) / 100%);
					}
				}
			}
		}
	}

	.horz{
		z-index:						2;
		height:							$cable-width * 2;

		.item{
			height:						100%;

			.cable{
				@include				abs-pos(50%, auto, auto, calc(50% - #{$gap / 2}));
				width:					calc(100% + #{$gap});
				height:					$cable-width;
			}

			&:last-child .cable{
				width:					calc(100% + #{$gap * 2});
			}

			.link{
				display:				none;
				@include				abs-pos(auto, auto, auto, calc(50% + #{$gap / 2}));
				@include				translate(-50%, 0);
				width:					$gap * 2;
				height:					100%;	

				&::before,
				&::after{
					content:			'';
					@include			abs-pos(50%, auto, auto, auto);
					@include			translate(0, -50%);
					height:				$link-width;
					width:				$gap / 2;
					border-radius:		5px;
				}

				&::before{
					left:				-1px;
				}

				&::after{
					right:				-1px;
				}
			}

			&.active{
				.cable{
					background:			RGBA(var(--sch-clr-active) / 100%);
				}
				.link{	
					width:				$gap * 1.3;				
					&::before,
					&::after{
						background:		RGBA(var(--sch-clr-active) / 100%);
					}
				}			
			}
		}
	}

	.vert{
		height:							70px;
		z-index:						1;

		.item{
			height:						100%;

			.cable{
				@include				abs-pos(#{-$cable-width}, auto, auto, 50%);
				@include				translate(-50%, 0);
				width:					$cable-width;
				height:					calc(100% + #{$cable-width});
				z-index:				-1;
			}

			.link{
				@include				abs-pos(calc(50% + #{$cable-width / 2}), auto, auto, 50%);
				@include				translate(-50%, -50%);
				width:					$gap * 2;
				height:					$gap * 2;

				&::before,
				&::after{
					content:			'';
					@include			abs-pos(auto, auto, auto, 50%);
					@include			translate(-50%, 0);
					height:				$gap / 2;
					width:				$link-width;
					border-radius:		5px;
				}

				&::before{
					top:				-1px;
				}

				&::after{
					bottom:				-1px;
				}
			}

			&.active{
				.link{
					height:				$gap * 1.3;
				}
			}
		}
	}
}










// THREE /////////////////////////////////////////////////////////////////////
.singleline-tree{

	$cable-width:						16px;
	$connection-width:					50px;

	grid-row-gap:						0!important;
	@include breakpoint(phone) {      	grid-row-gap:20px!important; }

	margin-top:							#{($connection-width - $cable-width) / 2};

	.col{
		overflow:						visible!important;
	}


	.singleline-tree--container{
		position:						relative;
		width:							100%;
		height:							90px;
		z-index:						9;
	}

	// CABLE VERTICAL
	.cable-vert{
		@include						abs-pos($cable-width, auto, 0, 50%);
		@include						translate(-50%, 0);
		height:							calc(100% - $cable-width);

		[class*="cable-"]{
			@include					abs-pos(auto, auto, auto, 50%);
			@include					translate(-50%, 0);
			width:						$cable-width;
			height:						40%;
			@include					transition(all 0.5s 0s ease-in-out);
			background:					lighten($grid--column-bg-dark, 10%);

			&::before{
				content:				'';
				position:				absolute;
				left:					50%;
				@include				translate(-50%, 0);
				display:				block;
				height:					#{$cable-width / 2};
				width:					$connection-width;
				@include				transition(all 0.5s 0s ease-in-out);
				border-radius:			3px;
				background:				lighten($grid--column-bg-dark, 10%);
			}
		}

		.cable-top{
			top:						0;
			&::before{
				bottom:					0;
			}
		}

		.cable-bottom{
			bottom:						-2px;
			background:					linear-gradient(0deg,
														RGBA(var(--clr-type-primary-light) / 100%) 0%,
														RGBA(var(--clr-type-primary) / 100%) 80%)!important;

			&::before{
				top:					0;
			}
		}

		// ACTIVE
		&.active{
			[class*="cable-"]{
				height:					47%;
				background:				RGBA(var(--clr-type-primary) / 100%);
				&::before{
					background:			RGBA(var(--clr-type-primary) / 100%);
				}
			}
		}
	}

	// CABLE HORIZONTAL
	.cable-horz{
		@include						abs-pos(0, auto, auto, auto);		
		height:							$cable-width;		
		@include						transition(all 0.5s 0s ease-in-out);
		background:						lighten($grid--column-bg-dark, 10%);

		&.middle{
			width:						100%;
			left:						50%;
			@include					translate(-50%, 0);
		}

		&.first,
		&.last{
			width:						calc(50% + #{$cable-width / 2});
		}

		&.first{
			right:						0;
		}

		&.last{
			left:						0;		
		}

		&[class*="connect-"]{
			&::before{
				content:				'';
				position:				absolute;
				top:					50%;				
				@include				translate(0, -50%);
				display:				block;
				width:					#{$cable-width / 2};
				height:					$connection-width;
				@include				transition(all 0.5s 0s ease-in-out);
				border-radius:			3px;
				background:				lighten($grid--column-bg-dark, 10%);
			}
		}

		&.connect-left::before{
			right:						0;
		}

		&.connect-right::before{
			left:						0;
		}

		// ACTIVE
		&.active{
			background:					RGBA(var(--clr-type-primary) / 100%);
			&.connect-left::before{
				right:					-#{($cable-width / 2) - 1};
				background:				RGBA(var(--clr-type-primary) / 100%);
			}

			&.connect-right::before{
				left:					-#{($cable-width / 2) - 1};
				background:				RGBA(var(--clr-type-primary) / 100%);
			}
		}
	}

	@each $grid--gap in $grid--setting{
		&.gap-#{nth($grid--gap, 1)}{				
			.cable-horz.last{
				left:					-#{nth($grid--gap, 3)};
				width:					calc(50% + #{$cable-width / 2} + #{nth($grid--gap, 3)});
			}
			.cable-horz.first{
				right:					-#{nth($grid--gap, 3)};
				width:					calc(50% + #{$cable-width / 2} + #{nth($grid--gap, 3)});
			}
		}
	}
}











// SINGLELINE SELECTOR ////////////////////////////////////////////////////////////////////
.singleline-options{

	@include breakpoint(xl){
		margin-top:					20px!important;
		margin:						20px auto!important;
		width:						100%;
	}

	.singleline-selector{
		margin:							0 auto;
		display:						flex;
		flex-direction:					row;
		justify-content:				center;
		gap:							5px;
		width:							fit-content;

		.btn{
			@extend						%font-bold;
			padding-left:				0.7rem!important;
			padding-right:				0.7rem!important;
		}

		> li{
			position:					relative;

			> ul{
				display:				none;
				width:					100%;
				@include				abs-pos(100%, auto, auto, 0);
				z-index:				9;			
				justify-content:		center;

				> li{
					> .btn{
						width:			100%;
						margin-top:		6px;
						box-shadow:		0 10px 10px rgba(black, 0.5);
					}
				}
			}

			&.active{
				> ul{
					display:			block;
				}
			}

			&.separator{
				width:					30px;
				i{
					justify-content:	center;
					@include			abs-pos(50%, auto, auto, 50%);
					@include			translate(-50%, -50%);
					> svg{
						fill:			rgba(white,0.3);
					}
				}
			}
		}
	}
}





// 